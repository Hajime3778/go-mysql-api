package usecase_test

import (
	"go-mysql-api/pkg/domain"
	"go-mysql-api/pkg/user/usecase"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

type UserUsecase struct {
	mock.Mock
}

// ArticleUsecase is an autogenerated mock type for the ArticleUsecase type
type UserRepository struct {
	mock.Mock
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *UserRepository) GetAll() ([]domain.User_DataTable, error) {
	ret := _m.Called()
	return ret.Get(0).([]domain.User_DataTable), ret.Error(1)
}

func (_m *UserRepository) FindByID(id int) (domain.User_DataTable, error) {
	ret := _m.Called(id)
	return ret.Get(0).(domain.User_DataTable), ret.Error(1)
}

func (_m *UserRepository) Create(user domain.User) error {
	ret := _m.Called(user)
	return ret.Error(0)
}

func (_m *UserRepository) Update(user domain.User) error {
	ret := _m.Called(user)
	return ret.Error(0)
}

func (_m *UserRepository) Delete(id int) error {
	ret := _m.Called(id)
	return ret.Error(0)
}

func TestFindByID(t *testing.T) {
	testUser := domain.User_DataTable{}
	testUser.ID = 1
	testUser.Name = "mockuser"
	testUser.Email = "mock@mock.com"
	testUser.CreatedAt = time.Now()
	testUser.UpdatedAt = time.Now()

	// モック
	mockUserRepo := new(UserRepository)

	t.Run("test1", func(t *testing.T) {
		// モックの戻り値を設定
		mockUserRepo.On("FindByID", testUser.ID).Return(testUser, nil).Once()
		// テスト対象(モックを注入)
		usecase := usecase.NewUserUsecase(mockUserRepo)

		user, err := usecase.FindByID(testUser.ID)

		assert.NoError(t, err)
		assert.NotNil(t, user)

		mockUserRepo.AssertExpectations(t)
	})
}
